1636503121
AwuilbDvXz%3A1e5d63d0f37020133b7fdeb3cde06b32-2bffa998e09789fe582f4741a4983db6
s:5944:"TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlIjoxMjp7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBkb2NCbG9jayI7TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrIjo3OntzOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAHN1bW1hcnkiO3M6MjA6IkNyZWF0ZWQgYnkgUGhwU3Rvcm0uIjtzOjQ2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAGRlc2NyaXB0aW9uIjtPOjQ1OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2tcRGVzY3JpcHRpb24iOjI6e3M6NTk6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2tcRGVzY3JpcHRpb24AYm9keVRlbXBsYXRlIjtzOjQxOiJVc2VyOiBEYW50ZQpEYXRlOiA5LzI1LzIwMTcKVGltZTogNzo1NyBBTSI7czo1MToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9ja1xEZXNjcmlwdGlvbgB0YWdzIjthOjA6e319czozOToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9jawB0YWdzIjthOjA6e31zOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAGNvbnRleHQiO086Mzg6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xDb250ZXh0IjoyOntzOjQ5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXENvbnRleHQAbmFtZXNwYWNlIjtzOjA6IiI7czo1NjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xDb250ZXh0AG5hbWVzcGFjZUFsaWFzZXMiO2E6MDp7fX1zOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAGxvY2F0aW9uIjtPOjMzOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24iOjI6e3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AbGluZU51bWJlciI7aTozO3M6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AY29sdW1uTnVtYmVyIjtpOjA7fXM6NTA6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2sAaXNUZW1wbGF0ZVN0YXJ0IjtiOjA7czo0ODoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9jawBpc1RlbXBsYXRlRW5kIjtiOjA7fXM6Mzk6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAaGFzaCI7czozMjoiMmJmZmE5OThlMDk3ODlmZTU4MmY0NzQxYTQ5ODNkYjYiO3M6Mzk6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAbmFtZSI7czoxMjoiTXVzZXVtREIucGhwIjtzOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAHBhdGgiO3M6MTI6Ik11c2V1bURCLnBocCI7czo0MToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBzb3VyY2UiO3M6MjY0MjoiPD9waHAKCi8qKgogKiBDcmVhdGVkIGJ5IFBocFN0b3JtLgogKiBVc2VyOiBEYW50ZQogKiBEYXRlOiA5LzI1LzIwMTcKICogVGltZTogNzo1NyBBTQogKi8KCiR1c2VybmFtZSA9ICJXMDExNjAwMTkiOwokcGFzc3dvcmQgPSAiTmljaG9sYXNjcyEiOwokaG9zdCA9ICJsb2NhbGhvc3QiOyAvL2RiLmNvb2xkb21haW4uY29tCiRkYm5hbWUgPSAiVzAxMTYwMDE5IjsKCi8qKgogKiBTZXR1cCBkYXRhYmFzZQogKi8KdHJ5IHsKICAgICRkYmggPSBuZXcgUERPKCJteXNxbDpob3N0PSRob3N0O2RibmFtZT0kZGJuYW1lIiwgJHVzZXJuYW1lLCAkcGFzc3dvcmQpOwp9IGNhdGNoIChQRE9FeGNlcHRpb24gJGVycikgewogICAgZWNobyAiSSdtIHNvcnJ5IHVzZXIgRGF2ZS4gSSBjYW4ndCBkbyB0aGF0LiBFcnJvcjoiIC4gJGVyci0+Z2V0TWVzc2FnZSgpOwogICAgZGllKCJFcnJvcjoiIC4gJGVyci0+Z2V0TWVzc2FnZSgpKTsKfQoKJGRiaC0+c2V0QXR0cmlidXRlKFBETzo6QVRUUl9FUlJNT0RFLCBQRE86OkVSUk1PREVfRVhDRVBUSU9OKTsKCmlmICghZW1wdHkoJF9QT1NUWyJhZGRpbmciXSkpIHsKICAgIHRyeSB7CiAgICAgICAgaWYgKAogICAgICAgICAgICAhZW1wdHkoJF9QT1NUWyJpdGVtTmFtZSJdKSAmJiAhZW1wdHkoJF9QT1NUWyJkb25hdG9yTmFtZSJdKSAmJgogICAgICAgICAgICAhZW1wdHkoJF9QT1NUWyJkYXRlRG9uYXRlZCJdKSAmJiAhZW1wdHkoJF9QT1NUWyJpdGVtVHlwZSJdKSAmJgogICAgICAgICAgICAocHJlZ19tYXRjaCgnL15bYS16QS1aXHNdKyQvJywgJF9QT1NUWyJpdGVtTmFtZSJdKSkKICAgICAgICApIHsKICAgICAgICAgICAgJHN0bXRJbnNlcnRJdGVtID0gJGRiaC0+cHJlcGFyZSgiSU5TRVJUIElOVE8gQUNNdXNldW1SZWNvcmRzKGl0ZW1OYW1lLCBkb25hdG9yTmFtZSwgZGF0ZURvbmF0ZWQsIGl0ZW1UeXBlKSAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBWQUxVRVMoOml0ZW1OYW1lLCA6ZG9uYXRvck5hbWUsIDpkYXRlRG9uYXRlZCwgOml0ZW1UeXBlKSIpOwogICAgICAgICAgICAkaXRlbU5hbWUgPSAkX1BPU1RbIml0ZW1OYW1lIl07CiAgICAgICAgICAgICRkb25hdG9yTmFtZSA9ICRfUE9TVFsiZG9uYXRvck5hbWUiXTsKICAgICAgICAgICAgJGRhdGVEb25hdGVkID0gJF9QT1NUWyJkYXRlRG9uYXRlZCJdOwogICAgICAgICAgICAkaXRlbVR5cGUgPSAkX1BPU1RbIml0ZW1UeXBlIl07CgogICAgICAgICAgICAkc3RtdEluc2VydEl0ZW0tPmJpbmRQYXJhbSgiOml0ZW1OYW1lIiwgJGl0ZW1OYW1lKTsKICAgICAgICAgICAgJHN0bXRJbnNlcnRJdGVtLT5iaW5kUGFyYW0oIjpkb25hdG9yTmFtZSIsICRkb25hdG9yTmFtZSk7CiAgICAgICAgICAgICRzdG10SW5zZXJ0SXRlbS0+YmluZFBhcmFtKCI6ZGF0ZURvbmF0ZWQiLCAkZGF0ZURvbmF0ZWQpOwogICAgICAgICAgICAkc3RtdEluc2VydEl0ZW0tPmJpbmRQYXJhbSgiOml0ZW1UeXBlIiwgJGl0ZW1UeXBlKTsKICAgICAgICAgICAgJHN0bXRJbnNlcnRJdGVtLT5leGVjdXRlKCk7CgogICAgICAgICAgICBlY2hvICJSZWNvcmQgaW5zZXJ0ZWQgc3VjY2Vzc2Z1bGx5ISI7CiAgICAgICAgfSBlbHNlIGlmIChwcmVnX21hdGNoKCcvXlthLXpBLVpcc10rJC8nLCAkX1BPU1RbIml0ZW1OYW1lIl0pKSB7CiAgICAgICAgICAgIGVjaG8gIlBsZWFzZSBlbnRlciBhIHZhbGlkIGl0ZW0gbmFtZSI7CiAgICAgICAgfSBlbHNlIGlmIChlbXB0eSgkX1BPU1RbImRvbmF0b3JOYW1lIl0pKSB7CiAgICAgICAgICAgIGVjaG8gIlBsZWFzZSBtYWtlIHN1cmUgeW91J3JlIHNpZ25lZCBpbiI7CiAgICAgICAgfSBlbHNlIGlmIChlbXB0eSgkX1BPU1RbIml0ZW1OYW1lIl0pKSB7CiAgICAgICAgICAgIGVjaG8gIlBsZWFzZSBlbnRlciBhbiBpdGVtIGludG8gdGhlIGZpZWxkIjsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBlY2hvICJBbiBlcnJvciBvY2N1cnJlZCB3aGVuIGluc2VydGluZyB5b3VyIHJlY29yZCI7CiAgICAgICAgfQogICAgfSBjYXRjaCAoUERPRXhjZXB0aW9uICRlKSB7CiAgICAgICAgZWNobyAiRXJyb3I6ICIgLiAkZS0+Z2V0TWVzc2FnZSgpOwogICAgfQp9IGVsc2UgewogICAgdHJ5IHsKICAgICAgICBpZiAoIWVtcHR5KCRfUE9TVFsiaXRlbU5hbWUiXSkpIHsKICAgICAgICAgICAgJHN0bXRTZWxlY3RJdGVtcyA9ICRkYmgtPnByZXBhcmUoIlNFTEVDVCAqIEZST00gQUNNdXNldW1SZWNvcmRzIFdIRVJFIGl0ZW1OYW1lIExJS0UgQ09OQ0FUKCclJywgOml0ZW1OYW1lLCAnJScpICIpOwoKICAgICAgICAgICAgJGl0ZW1OYW1lID0gJF9QT1NUWyJpdGVtTmFtZSJdOwoKICAgICAgICAgICAgJHN0bXRTZWxlY3RJdGVtcy0+YmluZFBhcmFtKCI6aXRlbU5hbWUiLCAkaXRlbU5hbWUpOwoKICAgICAgICAgICAgJHN0bXRTZWxlY3RJdGVtcy0+ZXhlY3V0ZSgpOwoKICAgICAgICAgICAgJHJvdyA9ICRzdG10U2VsZWN0SXRlbXMtPmZldGNoQWxsKFBETzo6RkVUQ0hfQVNTT0MpOwogICAgICAgICAgICBlY2hvIGpzb25fZW5jb2RlKCRyb3cpOwogICAgICAgIH0KICAgIH0gY2F0Y2ggKFBET0V4Y2VwdGlvbiAkZSkgewogICAgICAgIGVjaG8gIkVycm9yOiAiIC4gJGUtPmdldE1lc3NhZ2UoKTsKICAgIH0KfQoiO3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAbmFtZXNwYWNlcyI7YTowOnt9czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBpbmNsdWRlcyI7YTowOnt9czo0NDoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBmdW5jdGlvbnMiO2E6MDp7fXM6NDQ6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAY29uc3RhbnRzIjthOjA6e31zOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGNsYXNzZXMiO2E6MDp7fXM6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAaW50ZXJmYWNlcyI7YTowOnt9czo0MToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQB0cmFpdHMiO2E6MDp7fX0=";